# -*- coding: utf-8 -*-
"""NumberPlateRecognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cSggL2HYbGWWSoCnf71_hNDoTwwMoiSA
"""

import cv2
import pytesseract
import numpy as np
from google.colab.patches import cv2_imshow

from google.colab import files
uploaded = files.upload()

def recognize_number_plate(image_path):
    # Load image
    image = cv2.imread(image_path)

    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply edge detection
    edged = cv2.Canny(gray, 170, 200)

    # Find contours
    contours, _ = cv2.findContours(edged, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

    # Filter contours for rectangular shapes
    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:30]
    screen_contour = None
    for c in contours:
        # Approximate the contour
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.018 * peri, True)
        if len(approx) == 4:
            screen_contour = approx
            break

    if screen_contour is None:

        print("No number plate detected.")
        return

    # Masking other parts of the image
    mask = np.zeros(gray.shape, dtype=np.uint8)
    cv2.drawContours(mask, [screen_contour], -1, 255, -1)
    masked = cv2.bitwise_and(image, image, mask=mask)

    # Crop the number plate
    x, y, w, h = cv2.boundingRect(screen_contour)
    cropped = masked[y:y+h, x:x+w]

    # OCR using Tesseract
    text = pytesseract.image_to_string(cropped, config='--psm 8')
    print("Detected Number Plate Text:", text)

    # Display the image and cropped number plate
    cv2_imshow(image)
    cv2_imshow(cropped)

# Example usage:
recognize_number_plate('car3.jpg')
#recognize_number_plate('car2.jpg')